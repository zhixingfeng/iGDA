function darken(hex, amount) {
	var color = new less.tree.Color(hex.substr(1), 1.0);
	amount = new less.tree.Value(amount);
	return less.tree.functions.darken(color, amount).toCSS();
}

window.colors = {"pink": "#de5bbd", "lgreen": "#9dde5b", "lblue": "#5bdede", "purple": "#9d5bde", "rgreen": "#5bde7c", "rblue": "#5b7cde", "orange": "#debd5b", "red": "#de5b5b"};

window.langEntities = {"concept": {"color": "#de5b5b", "ideogram": "Concept", "name": "Concept", "belongsTo": null, "description": "Informal <b>interface</b> for types."}, "member_typedef": {"color": "#5bde7c", "ideogram": "class { typedef }", "name": "Member Typedef", "belongsTo": "typedef", "description": "Typedef within a class/struct."}, "grouped_typedef": {"color": "#5bde7c", "ideogram": "typedef", "name": "Grouped Typedef", "belongsTo": "typedef", "description": "Typedef in a semantic group."}, "global_variable": {"color": "#9dde5b", "ideogram": "var", "name": "Global Variable", "belongsTo": "variable", "description": "Global variable."}, "template_parameter": {"color": "#999", "ideogram": "<>", "name": "Template Parameter", "belongsTo": null, "description": "Templates can take types or constant integral values as parameters."}, "interface_metafunction": {"color": "#5b7cde", "ideogram": "#Fn<>", "name": "Interface Metafunction", "belongsTo": "metafunction", "description": "A metafunction that is part of a type's global interface."}, "tag": {"color": "#9d5bde", "ideogram": "Tag", "name": "Tag", "belongsTo": null, "description": "Class that is only used for its type (e.g. in <b>tag dispatching</b>)."}, "tutorial": {"color": "#000", "ideogram": "Tutorial", "name": "Tutorial", "belongsTo": null, "description": "Tutorials provide you with a step-by-step manual that helps you to achieve a certain goal."}, "typedef": {"color": "#5bde7c", "ideogram": "typedef", "name": "Typedef", "belongsTo": null, "description": "C++ typedefs create type aliases, e.g. alias complex template instantiations to a simple name."}, "group": {"color": "#de5bbd", "ideogram": "Group", "name": "Group", "belongsTo": null, "description": "Set of functions and/or tags that belong together."}, "specialization": {"color": "#de5b5b", "ideogram": "Spec", "name": "Specialization", "belongsTo": "class", "description": "Specialization or subclass of a class."}, "interface_function": {"color": "#5bdede", "ideogram": "#fn()", "name": "Interface Function", "belongsTo": "function", "description": "Global C++ function"}, "unknown": {"color": "#f00", "ideogram": "UNKNOWN", "name": "Unknown Language Entity", "belongsTo": null, "description": "This is an unknown language entity."}, "adaption": {"color": "#debd5b", "ideogram": "foreign::", "name": "Adaption", "belongsTo": null, "description": null}, "global_typedef": {"color": "#5bde7c", "ideogram": "typedef", "name": "Global Typedef", "belongsTo": "typedef", "description": "Global typedef"}, "function": {"color": "#5bdede", "ideogram": "fn()", "name": "Function", "belongsTo": null, "description": "C++ function"}, "enum": {"color": "#de5b5b", "ideogram": "enum", "name": "Enum", "belongsTo": null, "description": "User-defined C++ type for a fixed number of values, each having a name."}, "grouped_tag": {"color": "#9d5bde", "ideogram": "Tag", "name": "Grouped Tag", "belongsTo": "tag", "description": "Tag that belongs to a semantic group."}, "variable": {"color": "#9dde5b", "ideogram": "var", "name": "Variable", "belongsTo": null, "description": "Variable"}, "class": {"color": "#de5b5b", "ideogram": "Class", "name": "Class", "belongsTo": null, "description": "C++ data structure with both data and functions"}, "member_function": {"color": "#5bdede", "ideogram": ".fn()", "name": "Member Function", "belongsTo": "function", "description": "A class' or struct's member function."}, "member_variable": {"color": "#9dde5b", "ideogram": ".x", "name": "Member Variable", "belongsTo": "variable", "description": "Member variable of a class or struct."}, "global_metafunction": {"color": "#5b7cde", "ideogram": "Fn<>", "name": "Global Metafunction", "belongsTo": "metafunction", "description": "Global compile-time evaluated function that returns a type as a function of types or compile-time constants.  In C++, implemented as class templates."}, "macro": {"color": "#debd5b", "ideogram": "#define", "name": "Macro", "belongsTo": null, "description": null}, "global_function": {"color": "#5bdede", "ideogram": "fn()", "name": "Global Function", "belongsTo": "function", "description": "Global C++ function"}, "page": {"color": "#de5bbd", "ideogram": "Page", "name": "Page", "belongsTo": null, "description": "A documentation page without direct correspondance to a code entry."}, "metafunction": {"color": "#5b7cde", "ideogram": "Fn<>", "name": "Metafunction", "belongsTo": null, "description": "Compile-time evaluated function that returns a type as a function of types or compile-time constants.  In C++, implemented as class templates."}};